# -*- coding: utf-8 -*-
"""Ethereum_price_prediction(LinearReg).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R9ySDeTyFThNn06Lkl0_TG8YAI0nc83r

ETHEREUM Price Prediction using python
"""

#import the dependencies
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

#load the data
from google.colab import files
files.upload()

#get the data
df=pd.read_csv('ETH-USD.csv')
df

#create a variable for predicting 'n' days out into the future
projection=14
#create new column called prediction
df['Prediction']=df['Close'].shift(-projection)
df

#as we have many nan values in between, other than the obvious last 14
df_temp=df.dropna()
df_temp

#create independent dataset
x=df_temp[['Close']].values

x.shape

#create dependent dataset
y=df_temp[['Prediction']].values

y.shape

#split the data into train and test in 85:15 ratio
x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.15)

#Create and train the model
linreg=LinearRegression()
linreg.fit(x_train,y_train)

#test the model using score
#(returns coefficient of determination R2. Its a statistical measure of how well
# the predicted values are to the real value)
linreg_confidence=linreg.score(x_test,y_test)
print(f'Linear Regression confidence: {linreg_confidence}')

#variable, x_projection (last 14 rows prediction from the original dataset)
x_projection=np.array(df[['Close']])[-projection:]
print(x_projection)

#print linReg model's predictions
linreg_prediction = linreg.predict(x_projection)
print(linreg_prediction)

